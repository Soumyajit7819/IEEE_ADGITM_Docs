"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction to Embedded Systems Design","href":"/IEEE_ADGITM_Docs/docs/Embedded Systems Design","docId":"Embedded Systems Design"},{"type":"category","label":"Communication Protocol Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Serial Communication","href":"/IEEE_ADGITM_Docs/docs/Communication Protocol Basics/serial communication","docId":"Communication Protocol Basics/serial communication"},{"type":"link","label":"SPI protocol","href":"/IEEE_ADGITM_Docs/docs/Communication Protocol Basics/spi","docId":"Communication Protocol Basics/spi"},{"type":"link","label":"UART Protocol","href":"/IEEE_ADGITM_Docs/docs/Communication Protocol Basics/UART","docId":"Communication Protocol Basics/UART"},{"type":"link","label":"I2C Protocol","href":"/IEEE_ADGITM_Docs/docs/Communication Protocol Basics/i2c","docId":"Communication Protocol Basics/i2c"},{"type":"link","label":"USB Interface","href":"/IEEE_ADGITM_Docs/docs/Communication Protocol Basics/USB Interface","docId":"Communication Protocol Basics/USB Interface"}]},{"type":"category","label":"Fundamentals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Representation of Binary Data","href":"/IEEE_ADGITM_Docs/docs/Fundamentals/digital logic","docId":"Fundamentals/digital logic"},{"type":"link","label":"Overview of Ports","href":"/IEEE_ADGITM_Docs/docs/Fundamentals/io ports Overview","docId":"Fundamentals/io ports Overview"},{"type":"link","label":"ADC & DAC","href":"/IEEE_ADGITM_Docs/docs/Fundamentals/ADC & DAC","docId":"Fundamentals/ADC & DAC"},{"type":"link","label":"Pulse Width Modulation (PWM)","href":"/IEEE_ADGITM_Docs/docs/Fundamentals/PWM","docId":"Fundamentals/PWM"},{"type":"link","label":"Interrupts","href":"/IEEE_ADGITM_Docs/docs/Fundamentals/Interuppts","docId":"Fundamentals/Interuppts"}]},{"type":"link","label":"Arduino Platform","href":"/IEEE_ADGITM_Docs/docs/Arduino Fundamentals","docId":"Arduino Fundamentals"},{"type":"link","label":"Contributors","href":"/IEEE_ADGITM_Docs/docs/Contributors","docId":"Contributors"}]},"docs":{"Arduino Fundamentals":{"id":"Arduino Fundamentals","title":"Arduino Platform","description":"The Arduino UNO is the best board to get started with electronics and coding.","sidebar":"tutorialSidebar"},"Communication Protocol Basics/i2c":{"id":"Communication Protocol Basics/i2c","title":"I2C Protocol","description":"I2C stands for Inter-Integrated Circuit. It is a bus interface connection protocol incorporated into devices for serial communication. It was originally designed by Philips Semiconductor in 1982. Recently, it is a widely used protocol for short-distance communication. It is also known as Two Wired Interface(TWI).","sidebar":"tutorialSidebar"},"Communication Protocol Basics/serial communication":{"id":"Communication Protocol Basics/serial communication","title":"Serial Communication","description":"In serial communication, data is in the form of binary pulses. In other words, we can say Binary One represents a logic HIGH or 5 Volts, and zero represents a logic LOW or 0 Volts. Serial communication can take many forms depending on the type of transmission mode and data transfer. The transmission modes are classified as Simplex, Half Duplex, and Full Duplex. There will be a source (also known as a sender) and destination (also called a receiver) for each transmission mode.","sidebar":"tutorialSidebar"},"Communication Protocol Basics/spi":{"id":"Communication Protocol Basics/spi","title":"SPI protocol","description":"A Serial Peripheral Interface (SPI) bus is a system for serial communication, which uses up to four conductors, commonly three. One conductor is used for data receiving, one for data sending, one for synchronization and one alternatively for selecting a device to communicate with. It is a full duplex connection, which means that the data is sent and received simultaneously. The maximum baud rate is higher than that in the I2C communication system.","sidebar":"tutorialSidebar"},"Communication Protocol Basics/UART":{"id":"Communication Protocol Basics/UART","title":"UART Protocol","description":"Universal asynchronous receiver-transmitter (UART) is one of the simplest and oldest forms of device-to-device digital communication. You can find UART devices as a part of integrated circuits (ICs) or as individual components. UARTs communicate between two separate nodes using a pair of wires and a common ground.","sidebar":"tutorialSidebar"},"Communication Protocol Basics/USB Interface":{"id":"Communication Protocol Basics/USB Interface","title":"USB Interface","description":"If you need your embedded application to talk to a PC then increasingly the way to go is USB.","sidebar":"tutorialSidebar"},"Contributors":{"id":"Contributors","title":"Contributors","description":"This is a Beta Website.","sidebar":"tutorialSidebar"},"Embedded Systems Design":{"id":"Embedded Systems Design","title":"Introduction to Embedded Systems Design","description":"We have been brought up in the age of computing.Computers are everywhere (some we see, some we do not see).","sidebar":"tutorialSidebar"},"Fundamentals/ADC & DAC":{"id":"Fundamentals/ADC & DAC","title":"ADC & DAC","description":"Connecting digital circuitry to sensor devices is simple if the sensor devices are inherently digital themselves. Switches, relays, and encoders are easily interfaced with gate circuits due to the on/off nature of their signals.","sidebar":"tutorialSidebar"},"Fundamentals/digital logic":{"id":"Fundamentals/digital logic","title":"Representation of Binary Data","description":"Information is stored on the computer in binary form. A binary bit can exist in one of two possible states.","sidebar":"tutorialSidebar"},"Fundamentals/Interuppts":{"id":"Fundamentals/Interuppts","title":"Interrupts","description":"An interrupt is a signal to the processor emitted by hardware or software indicating an event that needs immediate attention. Whenever an interrupt occurs, the controller completes the execution of the current instruction and starts the execution of an Interrupt Service Routine (ISR) or Interrupt Handler.","sidebar":"tutorialSidebar"},"Fundamentals/io ports Overview":{"id":"Fundamentals/io ports Overview","title":"Overview of Ports","description":"An input port has the direction register bit at 0, meaning the software can only read the values on the input pin.","sidebar":"tutorialSidebar"},"Fundamentals/PWM":{"id":"Fundamentals/PWM","title":"Pulse Width Modulation (PWM)","description":"* PWM is a simple method of using a rectangular digital waveform to control an analog variable.","sidebar":"tutorialSidebar"}}}')}}]);